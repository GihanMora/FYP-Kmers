from skbio import Sequence
import skbio
from datetime import datetime
import os
import numpy as np

class Node:

    def __init__(self, letter):
        self.letter = letter
        self.next_nodes = {}

    def set_next(self, node):
        self.next_nodes[node.letter] = node

    def __repr__(self):
        return "letter - "+self.letter+" next nodes -"+str(self.next_nodes)


class Tree:
    def __init__(self):
        self.root = {}

    def add_kmer(self, kmer):
        if not kmer[0] in self.root:
            self.root[kmer[0]] = Node(kmer[0])

        ptr = self.root[kmer[0]]
        itr = 1

        while itr < len(kmer):

            if kmer[itr] not in ptr.next_nodes:
                ptr.next_nodes[kmer[itr]] = Node(kmer[itr])
            ptr = ptr.next_nodes[kmer[itr]] #put out of the loop
            itr += 1

    def has_kmer(self, kmer):
        itr = 0

        if not kmer[0] in self.root:
            return False

        ptr = self.root[kmer[0]]
        itr = 1

        while itr < len(kmer):

            if kmer[itr] not in ptr.next_nodes:
                return False
            else:
                ptr = ptr.next_nodes[kmer[itr]]
                itr += 1
        return True

seq1='CTACCACACCCCAGGAAACAGCAGTGATTAACCTTTAGCATAAACGAAGTTTAACTAAGCTATAAAGGGTTGGTCAATTTCGTGCAGCCACCGCGGTCACACGATTAACCCAATCAATGAAGCGGCGTAAAGGTGTTTTGACCCTCCCATAAAGCTAAAACTCACCTGAGTTGAACTCCAGTAAAATTACGAAAAAAATCTGACACACAATAGCTAAGACCCAAACTGGGATTAGATCCCCACTTGCTTAGCCCTAAACCTCAACTAACACAAAGCTCGCCAGCACTACGAGCCACAGCTTAAAACTCAAAGGACCTGCGGTGCTTATCCCTCTAGAGGAGCCTGTTCTGTAATCGATAAACCCCGATCAACCTCACCCCTCTTGCTCAGCCTATATACCGCCATCTTCAGCAAACCCTGAGGCTACATAAGCGCAAGTACCACGTAAAGACGTTAGGTCAAGGTGTAGCCCATGAGGTGGCAGAATGGGCTACATTTTCTGAAAACTCGATAGCCTATGAAAAAGGGTCGGTGGATTTAGCAGTAAACTAAGAGTAGAGTGCTAGTTAACAGGGCCCTGAAGCGGTACACACCGCCCGTCACCCTCCTCAAACTAAGAGGAGACAAGTCGTAACATGGTAAGTGTACTGGAAAGTGACTTGGACCAGATGTAGCTAACAAGCACCCAACTTACACTTAGGAGATTTCTTAACACCGCTCGAGCTAAACCTAGCCCAAACCATCCACCTAGACCCCAAACCATTCAATAAAGTATAGGCGATAGAAGCGGCGCAATGTACCGCAAGGGAAGATAACAAGCATAATATAGCAAGGACTAACCCCATACCTTCTGCATAATGAATTAACTAGAAACTTTGAAGGAGAGCCAAGCAAGACCCCGAAACCAGACGAGCTACCTAAGAACAAGAGCACACCCGTCTATGTAGCAAAATAGTGGGAAGATTTATAGGTAGAGGCGACAAACCTACCGAGCCTGGTGATAGCTGGTTGTCCAAGATGAATCTAGTTCAACTTTAAATCATCCCCTTGTAATTTAACTGTTAGTCCAAAGAGGAACAGCTCTTTGGACAGGAAAAAACCTTGTAGAGAGAAAAATTTAAACCCATAGTAGCCTAAAAGCAGCCACCAAAGAGCGTCAAGCTCAACACAAAAAATCCCAAAATATAAGAACCCTCCACCCAATTGACCAATCTATCCCCTATAGCTAATGTTAGTATAAGAACATGAAATTCTCGCATAAGCCTGATTAAAAACTGACAATTACAGCATATCTAATCAACCAAAAGTCTTATTACCCCTGTCAACCCAACACAGGCATGCTTGGAAAGGTTAAAAAAAGAAAGGAACTCGGCAACTTACCCCGCCTGTTTACCAAAAACATCACCTCTAGCATCAATTAGAGCACCGCCTGCCCAGTGACCATTTAACGGCCGCGGTACCCAACCGTGCAAAGGTAGATAATCACTGTTCCAATAGGGACCTGTATGAATGGCCACGAGGGTTCAGCTGTCTCTTACTTTTAACCAGTGAAATTGACCTCCGTGAAGAGGCGGGCATAACACAGAAGACGAGAAGCCCTATGGAGCTTTAAAACAACCCACCCACAGGTCCTAACCAAACCTTCGGTTGGGGCGACCTCGGAGCAGAACCCAACCTCCGAGCAAGACTCACCAGTCAAAGGAAAATTGATCCAATAGACCAACGGAACAAGTTACCCTAGGGTAACAGCGCAACCTATTCTAGAGTCCATATCAACAATAGGGTTTACGACCTCGATGTTGGATCAGGACACCCGATGGTGCAGCCGCTATTAAAGGTTCGTTTGTTCAACGATTAAATCCTACGTGATCTGAGTTCAGTAATCCAGGTCGGTTTCTATCTACCTTCCTCCCTGTACAAAGGACAAGAGAAATAAGGTATTCACAAAGCCTTCCCCCGTAATATCATCTCAATATATACCCACCCACCCAAGAAGGT'
seq2='CTACCACACCCCAGGACTCAGCAGTGATAAATATTAAGCATGAACGAAGTTTGACTAAGCTATACAGGGTTGGTAAATTTCGTGCAGCCACCGCGGTCATACGATTAACCCAACTAATATTTTGGCGTAAAAGTGCCAATAAATCTCAATAGAATTAAAATCCAACTTATATGATTCATTGTAAGCCAACGAAAAACTTTATATGCACGATAGCTAAGACCCAAACTGGGATTAGATCCCCACTTGCTTAGCCCTAAACCTTAATTAATACAAAATTTGCCAGAACTACTAGCTACAGCTTAAAACTCAAAGGACTTGCGGTACTTATCCATCTAGAGGAGCCTGTTCTATAATCGATAAACCCCGTTCTACCTTACCCTTCTCGCTCAGCCTATATACCGCCATCTTCAGCAAACCCTAAGGCACTATAAGCACAAGAACAACATAAAAACGTTAGGTCAAGGTGTAGCCAATGAAGCGGAAGAATGGGCTACATTTTCTAGAGAACCGAAACCTTATGAAAAAAGGACGGAGGATTTAGTAGTAAATTAAGAATAGAGAGCTAATTAATAGAGCAATGAAGTAGCACACACCGCCCGTCACCCTCCTCAATACAAGAGGAGATAAGTCGTAACAAGGTAAGCATACTGGAAAGTGGCTTGGATCACATGTAGCTAACAAGCATCTGGCCTACACCCAGAAGAATTTAAAAAAACACTTGAACTAACCCTAGCCCACACCAACCAACTACCACCTAAAACATTTCAAAAAGTATTGGAGAAAGAATAAGAGCTAAGTACCGCAAGGGAAGATATAAAGTAAAAACAAGCAAAGATTAAACCTGTACCTTTTGCATAATGAATTAACTAGAACCTTAAAAAAAGAATTAAGCAAGACCCCGAAACCAAACGAGCTACCTAAAAACATGAATCAACCCGTCTATGTAGCAAAATAGTGGGAAGATTTTTAGGTAGAGGTGAAAAGCCTATCGAGCTTGGTGATAGCTGGTTGCCCAAAAAGAATTTAGTTCAAACTTTAAGAATCAAAATGTAACTTAAAATATAGCCAAAAGAGGGACAGCTCTTTAGGACGGAAAAAACCTTAAATAGTGAACAACTACAAACCATTGTAGCTTAAAAGCAGCCATCAAAGAGCGTAAGCCACATCACCACTAATTCCACAACCTCAAAATCCAAATTCAAATTGGCTAATCTATGTCCTAGTGATACTGTTAATATGTGAACAAGACAATCCAGCACAAGTGCTAACCGGAATTGTTAATTATTGAATAGGCAACCCAACAAAGAATCTATCCCTATCGTTAGCCCAACACAGGCGTGCTTGGAAAGTTTAAAAAAGTAAAGGAACTCGGCAACGAACCCCGCCTGTTTACCAAAAACATCTCCTCTAGCATAAATTAGTGCATCGCCTGCCCAGTGACAATTCCACGGCCGCGGTATCCGACCGTGCAAAGGTAGATAATCACTGTTCCATTAGGGACTAGAATGAATGGCAACGAGGGTCCAACCGTCTCTTACTTGCAATCAGTGAAATTGACCTCAGTGAAGGGGCGGACTCATAATAAAAGACGAGAAGCCCTATGGAGCTTTAATCAATATAACCTAATGGGCGAAAAAAATTATTCGGTTGGGGTGACCTCGGAGAATAAAAAATCCTCCGAATGTAACCTGTCCGACCCAGCAATATTGACCCAATTGATCAACGGACCAAGTTACCCTAGGGTAACAGCGCGACCTATTTAAGAGTTCATATCGACAATAGGGTTTACGACCTCGATGTTGGATCAGGACACCCAATGGTGCAGAAGCTATTAATGGTTCGTTTGTTCAACGATTAAATCCTACGTGATCTAAGTCCGGCAATCCAGGTCGGTTTCTATCTATTTTTCTCCCAGTACAAAGGACAAGAGAAATGGAGACAACCAACTAGTTCCAACCATTAGAAAAACTTAAAATATGTAATAAATCCTTAGACAAT'
seq1 = Sequence(seq1)
seq2 = Sequence(seq2)
seq1_kmers = set(map(str, seq1.iter_kmers(4, overlap=True)))
seq2_kmers = set(map(str, seq2.iter_kmers(4, overlap=True)))
t= datetime.now()
print(len(seq1_kmers.intersection(seq2_kmers)))
print(datetime.now()-t)
# print(seq1_kmers)
# print(seq2_kmers)
t= datetime.now()
t1 = Tree()
t2 = Tree()

for i in seq1_kmers:
    t1.add_kmer(i)


for i in seq2_kmers:
    t2.add_kmer(i)

count=0
for i in seq1_kmers:
    if (t2.has_kmer(i)):
        count+=1
print(count,len(seq1_kmers))
print(datetime.now()-t)
# print(t.has_kmer('ACGT'))
# print(t.has_kmer('ATGT'))

print(t1.root)
print(t2.root)

